{
  "openapi": "3.0.2",
  "info": {
    "title": "Leiria Market",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Addresses"
    },
    {
      "name": "Authentication"
    },
    {
      "name": "Categories and Subcategories"
    },
    {
      "name": "Collection Points"
    },
    {
      "name": "Configurations"
    },
    {
      "name": "File Resources"
    },
    {
      "name": "Health Orders"
    },
    {
      "name": "Health Products"
    },
    {
      "name": "Helpdesk Schedules"
    },
    {
      "name": "Live Search"
    },
    {
      "name": "Messages"
    },
    {
      "name": "Orders"
    },
    {
      "name": "Payment"
    },
    {
      "name": "Products"
    },
    {
      "name": "Shipping prices"
    },
    {
      "name": "Shopping Cart"
    },
    {
      "name": "Store Events"
    },
    {
      "name": "Stores"
    },
    {
      "name": "Tags"
    },
    {
      "name": "Users"
    },
    {
      "name": "Vouchers"
    }
  ],
  "paths": {
    "/addresses": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "summary": "Returns a list of user adresses Roles:CUSTOMER",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 0,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of user adresses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SavedAddress"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Addresses"
        ],
        "summary": "Create an address; Roles:CUSTOMER",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object persisted with valid id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "401": {
            "description": "Unauthorized Error"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/addresses/first": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "summary": "Returns the first user address Roles:CUSTOMER",
        "responses": {
          "200": {
            "description": "Returns the first user address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "ADDRESS NOT FOUND"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/addresses/{id}": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "summary": "Returns an user address Roles:CUSTOMER",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a user address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "ADDRESS NOT FOUND"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Addresses"
        ],
        "summary": "Updates an address; Roles:CUSTOMER",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object persisted with valid id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "401": {
            "description": "Unauthorized Error"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Addresses"
        ],
        "summary": "Remove user address",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "400": {
            "description": "ADDRESS NOT FOUND"
          },
          "401": {
            "description": "Unauthorized Error"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/authentication/activate": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Activates a user account (with email token)",
        "parameters": [
          {
            "name": "t",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "requestBody": {
          "content": {}
        },
        "responses": {
          "200": {
            "description": "Activate account and execute auto login",
            "content": {}
          },
          "401": {
            "description": "User not found or token expired"
          }
        }
      }
    },
    "/authentication/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Creates a user session",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cartId": {
                    "$ref": "#/components/schemas/UUID"
                  },
                  "email": {
                    "maxLength": 200,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  },
                  "password": {
                    "maxLength": 300,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return user object and a valid JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid object"
          }
        }
      }
    },
    "/authentication/logout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Removes a user session; Roles:ADMIN, STORE_MANAGER, CUSTOMER",
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/authentication/recover-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Requests a password reset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string",
                    "nullable": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Send one email with reset link",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "401": {
            "description": "User not found"
          }
        }
      }
    },
    "/authentication/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register customer, this type of user will receive one email to confirm new account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "maxLength": 300,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  },
                  "city": {
                    "maxLength": 50,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  },
                  "contact": {
                    "maxLength": 50,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  },
                  "email": {
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string",
                    "nullable": false
                  },
                  "name": {
                    "maxLength": 200,
                    "type": "string"
                  },
                  "newsletter": {
                    "type": "boolean"
                  },
                  "password": {
                    "maxLength": 244,
                    "type": "string"
                  },
                  "postalCode": {
                    "maxLength": 50,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return user with id and role Customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid object"
          },
          "409": {
            "description": "User already Exists"
          }
        }
      }
    },
    "/authentication/register-guest": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register guest, this type of user will receive one email to confirm new account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "maxLength": 300,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  },
                  "city": {
                    "maxLength": 50,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  },
                  "contact": {
                    "maxLength": 50,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  },
                  "email": {
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string",
                    "nullable": false
                  },
                  "name": {
                    "maxLength": 200,
                    "type": "string"
                  },
                  "newsletter": {
                    "type": "boolean"
                  },
                  "password": {
                    "maxLength": 244,
                    "type": "string"
                  },
                  "postalCode": {
                    "maxLength": 50,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return user with id and role Customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid object"
          },
          "409": {
            "description": "User already Exists"
          }
        }
      }
    },
    "/authentication/reset-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Resets password (with email token)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "maxLength": 244,
                    "type": "string"
                  },
                  "resetPasswordToken": {
                    "maxLength": 400,
                    "minLength": 1,
                    "type": "string",
                    "nullable": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Change password and execute auto login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "401": {
            "description": "User not found or token expired"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories and Subcategories"
        ],
        "summary": "Return all Categories; Roles:ADMIN",
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Categories and Subcategories"
        ],
        "summary": "Create Category; Roles:ADMIN",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "category": {
                    "$ref": "#/components/schemas/CategoryDTO"
                  },
                  "thumbnail": {
                    "$ref": "#/components/schemas/File"
                  },
                  "header": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object persisted with valid id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "401": {
            "description": "Unauthorized Error"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/categories/public": {
      "get": {
        "tags": [
          "Categories and Subcategories"
        ],
        "summary": "List all public active categories ",
        "responses": {
          "200": {
            "description": "Return all active categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/categories/public/highlight": {
      "get": {
        "tags": [
          "Categories and Subcategories"
        ],
        "summary": "List all public active categories ",
        "responses": {
          "200": {
            "description": "Return all active categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/categories/subcategories": {
      "get": {
        "tags": [
          "Categories and Subcategories"
        ],
        "summary": "Return all subcategories if queryparam categoryId not supplied ; Roles:ADMIN",
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubCategory"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/categories/subcategories/public": {
      "get": {
        "tags": [
          "Categories and Subcategories"
        ],
        "summary": "Return all public subcategories if queryparam categoryId not supplied ; Roles:ADMIN",
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all active subcategories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubCategory"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/categories/subcategory": {
      "post": {
        "tags": [
          "Categories and Subcategories"
        ],
        "summary": "Create Subcategory; Roles:ADMIN",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string",
                    "nullable": false
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "mainCategoryId": {
                    "format": "int64",
                    "minimum": 1,
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object persisted with valid id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubCategory"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "401": {
            "description": "Unauthorized Error"
          },
          "403": {
            "description": "main category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/categories/subcategory/{id}": {
      "put": {
        "tags": [
          "Categories and Subcategories"
        ],
        "summary": "Update Subcategory; Roles:ADMIN",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string",
                    "nullable": false
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "mainCategoryId": {
                    "format": "int64",
                    "minimum": 1,
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubCategory"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "401": {
            "description": "Unauthorized Error"
          },
          "403": {
            "description": "sub category not found or main category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Categories and Subcategories"
        ],
        "summary": "Remove Category and  all subcategories related if none of them is in use ; Roles:ADMIN",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "400": {
            "description": "Return IN USE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/categories/{id}": {
      "put": {
        "tags": [
          "Categories and Subcategories"
        ],
        "summary": "Update Category; Roles:ADMIN",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "category": {
                    "$ref": "#/components/schemas/CategoryDTO"
                  },
                  "thumbnail": {
                    "$ref": "#/components/schemas/File"
                  },
                  "header": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "401": {
            "description": "Unauthorized Error"
          },
          "403": {
            "description": "sub category not found or main category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Categories and Subcategories"
        ],
        "summary": "Remove Category and  all subcategories related if none of them is in use ; Roles:ADMIN",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "400": {
            "description": "Return IN USE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/collection-points": {
      "get": {
        "tags": [
          "Collection Points"
        ],
        "summary": "Return all Collection Points; Roles:ADMIN",
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectionPoint"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Collection Points"
        ],
        "summary": "Create Collection Points; Roles:ADMIN",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "collectionPoint": {
                    "$ref": "#/components/schemas/CollectionPointDTO"
                  },
                  "thumbnail": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object persisted with valid id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionPoint"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "401": {
            "description": "Unauthorized Error"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/collection-points/find/public": {
      "get": {
        "tags": [
          "Collection Points"
        ],
        "summary": "List all public active collection points with name related with search keyword, can be used with wildcard * on start, end ot both",
        "parameters": [
          {
            "name": "keyword",
            "in": "query",
            "required": true,
            "schema": {
              "default": "*",
              "minLength": 1,
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all active Collection Points",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectionPoint"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/collection-points/public": {
      "get": {
        "tags": [
          "Collection Points"
        ],
        "summary": "List all public active Collection Points",
        "responses": {
          "200": {
            "description": "Return all active Collection Points",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectionPoint"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/collection-points/{id}": {
      "get": {
        "tags": [
          "Collection Points"
        ],
        "summary": "Return one Collection Point by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionPoint"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Collection Points"
        ],
        "summary": "Update Collection Point; Roles:ADMIN",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "collectionPoint": {
                    "$ref": "#/components/schemas/CollectionPointDTO"
                  },
                  "thumbnail": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionPoint"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "401": {
            "description": "Unauthorized Error"
          },
          "403": {
            "description": " Collection Point not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Collection Points"
        ],
        "summary": "Remove Collection Points and  all products and services related; Roles:ADMIN",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "400": {
            "description": "Return IN USE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/config": {
      "put": {
        "tags": [
          "Configurations"
        ],
        "summary": "Updates configurations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "auth": [
              "auth"
            ]
          }
        ]
      }
    },
    "/config/whatsapp": {
      "get": {
        "tags": [
          "Configurations"
        ],
        "summary": "Returns the whatsapp phone number",
        "responses": {
          "200": {
            "description": "Return the whatsapp phone number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Config"
                }
              }
            }
          }
        }
      }
    },
    "/health-orders": {
      "get": {
        "tags": [
          "Health Orders"
        ],
        "summary": "Return all Health Orders; Roles:ADMIN",
        "parameters": [
          {
            "name": "collectionPointId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 0,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/HealthOrderStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthOrder"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Health Orders"
        ],
        "summary": "Create order",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object persisted with valid id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthOrder"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "409": {
            "description": "Claimant already make one request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/health-orders/change-state/{id}": {
      "put": {
        "tags": [
          "Health Orders"
        ],
        "summary": "Set state of order; Roles:ADMIN",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthOrderChangeStateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthOrder"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "403": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/health-orders/export": {
      "get": {
        "tags": [
          "Health Orders"
        ],
        "summary": "Export to xls; Roles:ADMIN",
        "parameters": [
          {
            "name": "collectionPointId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/HealthOrderStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Download de result file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/health-products": {
      "get": {
        "tags": [
          "Health Products"
        ],
        "summary": "Return all Products; Roles:ADMIN",
        "parameters": [
          {
            "name": "collectionPointId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthProduct"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Health Products"
        ],
        "summary": "Create product; Roles:ADMIN",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "healthProduct": {
                    "$ref": "#/components/schemas/HealthProductDTO"
                  },
                  "thumbnail": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object persisted with valid id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthProduct"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "401": {
            "description": "Unauthorized Error"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/health-products/find/public": {
      "get": {
        "tags": [
          "Health Products"
        ],
        "summary": "List all public active health products with shortDescription related with search keyword, can be used with wildcard * on start, end ot both",
        "parameters": [
          {
            "name": "keyword",
            "in": "query",
            "schema": {
              "minLength": 1,
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all active health products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthProduct"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/health-products/public": {
      "get": {
        "tags": [
          "Health Products"
        ],
        "summary": "List all public active health products",
        "parameters": [
          {
            "name": "collectionPointId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all active health products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthProduct"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/health-products/{id}": {
      "get": {
        "tags": [
          "Health Products"
        ],
        "summary": "Return one Health Product by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthProduct"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Health Products"
        ],
        "summary": "Update Product; Roles:ADMIN",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "healthProduct": {
                    "$ref": "#/components/schemas/HealthProductDTO"
                  },
                  "thumbnail": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthProduct"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "401": {
            "description": "Unauthorized Error"
          },
          "403": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Health Products"
        ],
        "summary": "Remove Heahth Product; Roles:ADMIN",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "400": {
            "description": "Return IN USE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/livesearch": {
      "get": {
        "tags": [
          "Live Search"
        ],
        "summary": "List all public active products and stores",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 10,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a list of active products and stores",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Result"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/messages": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Send Message",
        "parameters": [
          {
            "name": "g-recaptcha-response",
            "in": "query",
            "schema": {
              "pattern": "\\S",
              "type": "string",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "401": {
            "description": "Unauthorized Error"
          }
        }
      }
    },
    "/messages/store": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Sends store application message",
        "parameters": [
          {
            "name": "g-recaptcha-response",
            "in": "query",
            "schema": {
              "pattern": "\\S",
              "type": "string",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreApplicationMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "401": {
            "description": "Unauthorized Error"
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Orders; Roles:CUSTOMER",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 0,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return current user orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/orders/checkout": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Checkout; Roles:CUSTOMER",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object persisted with valid id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "HOME DELIVERY NOT POSSIBLE"
          },
          "401": {
            "description": "BAD DELIVERY METHOD"
          },
          "412": {
            "description": "PAYMENT SUPPLIER ERROR"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/orders/items/export": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Returns a list of store order items in a XLSX file, ROLE:ADMIN",
        "responses": {
          "200": {
            "description": "Return items of all orders in a XLSX file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/orders/{id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Find and order by Id; Roles:CUSTOMER",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return current user orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "ORDER NOT FOUND"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/orders/{id}/items": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Returns a list of order items, ROLE:CUSTOMER",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 0,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return items of a given order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreDeliveryOrder"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/payment/callback": {
      "get": {
        "tags": [
          "Payment"
        ],
        "parameters": [
          {
            "name": "canal",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identificador",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referencia",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transacao",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "valor",
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/payment/fees": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "List all fees",
        "responses": {
          "200": {
            "description": "Return all fee configurations ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentFeeConfiguration"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment/methods": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "List all available payment methods",
        "responses": {
          "200": {
            "description": "Return all availiable payment methods",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethod"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Return all Products; Roles:ADMIN, STORE_MANAGER",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 0,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "storeId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized store"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create product; Roles:STORE_MANAGER",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "productDTO"
                ],
                "type": "object",
                "properties": {
                  "additionalPhotos": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListFile"
                      },
                      {
                        "maxItems": 9
                      }
                    ]
                  },
                  "productDTO": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProductDTO"
                      },
                      {
                        "nullable": false
                      }
                    ]
                  },
                  "thumbnail": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object persisted with valid id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed, MISSING PAYMENT FIELDS ON STORE, DELIVERY METHOD NOT AVAILABLE, CATEGORY NOT FOUND, DELIVERY METHOD NOT AVAILABLE TO THE SELECTED PRODUCT SIZE OR WEIGHT, PROMOTION DISCOUNT REQUIRED,PROMOTION START DATE REQUIRED, PROMOTION END DATE REQUIRED, PROMOTION TOO LONG"
          },
          "401": {
            "description": "Unauthorized Error"
          },
          "403": {
            "description": "INVALID STORE"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/products/allowhighlight": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Return whatever it's allowed to highlight products; Roles:ADMINs",
        "responses": {
          "200": {
            "description": "Returns whatever it's allowed to highlight products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/products/brands": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List all product brands",
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "color",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "maxPrice",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minPrice",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "stock",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "storeId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of brands",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/categories": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List all product categories",
        "parameters": [
          {
            "name": "brand",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "color",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "maxPrice",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minPrice",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "stock",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "storeId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/colors": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List all product colors",
        "parameters": [
          {
            "name": "brand",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "maxPrice",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minPrice",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "stock",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "storeId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of colors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/download-import-template": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Download Excel template",
        "responses": {
          "200": {
            "description": "Download de result file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/products/find/public": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List all public active products",
        "parameters": [
          {
            "name": "brand",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "color",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "highlight",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "maxPrice",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minPrice",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "default": "desc",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 0,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "stock",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "storeId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "subcategoryId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all active products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPublicResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/import": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Uploads products form CSV file",
        "parameters": [
          {
            "name": "storeId",
            "in": "query",
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "auth": [
              "auth"
            ]
          }
        ]
      }
    },
    "/products/maxprice": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Return the max product price",
        "parameters": [
          {
            "name": "brand",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "color",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "stock",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "storeId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the maximum price of the available products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        }
      }
    },
    "/products/product-group/{groupId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List all  active products belonging to a group from my store, ROLES: STORE_MANAGER",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all group products belonging to a group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/products/products.csv": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List public active products in csv format",
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 25,
              "type": "integer"
            }
          },
          {
            "name": "storeId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return active products",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductCSV"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/public/highlight": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Return highlighted products, default 12",
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 12,
              "maximum": 255,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return highlighted products, default 12",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPublicResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/public/product-group/{storeId}/{groupId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List all public active products belonging to a group",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all group products belonging to a group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPublicResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/reindex": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Reindex; Roles:ADMIN",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/products/sizes": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List all product sizes",
        "parameters": [
          {
            "name": "brand",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "color",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "maxPrice",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "minPrice",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "stock",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "storeId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of sizes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Return one Product by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductPublicResponse"
                }
              }
            }
          },
          "400": {
            "description": "PRODUCT NOT FOUND"
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update Product; STORE_MANAGER",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "productDTO"
                ],
                "type": "object",
                "properties": {
                  "additionalPhotos": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListFile"
                      },
                      {
                        "maxItems": 9
                      }
                    ]
                  },
                  "productDTO": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ProductDTO"
                      },
                      {
                        "nullable": false
                      }
                    ]
                  },
                  "thumbnail": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed, TOO MANY PHOTOS, DELIVERY METHOD NOT AVAILABLE, CATEGORY NOT FOUND, DELIVERY METHOD NOT AVAILABLE TO THE SELECTED PRODUCT SIZE OR WEIGHT, PROMOTION DISCOUNT REQUIRED, PROMOTION DISCOUNT REQUIRED, PROMOTION START DATE REQUIRED, PROMOTION START DATE REQUIRED, PROMOTION END DATE REQUIRED, PROMOTION TOO LONG"
          },
          "401": {
            "description": "Unauthorized Error"
          },
          "403": {
            "description": "PRODUCT NOT FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Remove Product; Roles:ADMIN, STORE_MANAGER",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "400": {
            "description": "PRODUCT NOT FOUND, Product is already in an order"
          },
          "401": {
            "description": "Unauthorized Error"
          },
          "403": {
            "description": "INVALID STORE"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/products/{id}/highlight": {
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Sets products as highlighted",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
              "nullable": false
            }
          },
          {
            "name": "highlight",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return highlighted product",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "PRODUCT NOT FOUND"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/resources/download/public/manuals/{manual}": {
      "get": {
        "tags": [
          "File Resources"
        ],
        "parameters": [
          {
            "name": "manual",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/resources/products": {
      "get": {
        "tags": [
          "File Resources"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/resources/view/public/{hash}": {
      "get": {
        "tags": [
          "File Resources"
        ],
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/schedules": {
      "get": {
        "tags": [
          "Helpdesk Schedules"
        ],
        "summary": "List helpdesk schedules",
        "responses": {
          "200": {
            "description": "Return a list of helpdesk schedules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HelpdeskSchedule"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Helpdesk Schedules"
        ],
        "summary": "Creates a new helpdesk schedule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HelpdeskScheduleDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a new helpdesk schedules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HelpdeskSchedule"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/schedules/{id}": {
      "put": {
        "tags": [
          "Helpdesk Schedules"
        ],
        "summary": "Updates a helpdesk schedule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HelpdeskScheduleDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated helpdesk schedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HelpdeskSchedule"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Helpdesk Schedules"
        ],
        "summary": "Deletes a helpdesk schedule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/shipping": {
      "get": {
        "tags": [
          "Shipping prices"
        ],
        "summary": "Return all shippings prices; Roles:ADMIN",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShippingPrice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized store"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/shipping/calculate": {
      "get": {
        "tags": [
          "Shipping prices"
        ],
        "summary": "Calculate shipping price",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ListLong"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingPrice"
                }
              }
            }
          },
          "400": {
            "description": "PRODUCT NOT ELIGIBLE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "403": {
            "description": "PRODUCT NOT FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        }
      }
    },
    "/shipping/{id}": {
      "get": {
        "tags": [
          "Shipping prices"
        ],
        "summary": "Return the shipping price",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingPrice"
                }
              }
            }
          },
          "403": {
            "description": "SHIPPING PRICE NOT FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Shipping prices"
        ],
        "summary": "Update Shipping; ADMIN",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingPriceDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingPrice"
                }
              }
            }
          },
          "400": {
            "description": "SHIPPING PRICE ALREADY EXISTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error"
          },
          "403": {
            "description": "Shipping price not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/shoppingcart": {
      "get": {
        "tags": [
          "Shopping Cart"
        ],
        "summary": "Returns a list of shopping cart items;",
        "parameters": [
          {
            "name": "cartId",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 0,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of shopping cart items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShoppingCart"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Shopping Cart"
        ],
        "summary": "Adds product to shopping cart;",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShoppingCartDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return shopping cart item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShoppingCart"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          }
        }
      }
    },
    "/shoppingcart/{id}": {
      "put": {
        "tags": [
          "Shopping Cart"
        ],
        "summary": "Update Product;",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShoppingCartDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShoppingCart"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "401": {
            "description": "Unauthorized Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Shopping Cart"
        ],
        "summary": "Remove Product from shopping cart;",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "cartId",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "400": {
            "description": "Return IN USE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error"
          }
        }
      }
    },
    "/storeevents": {
      "get": {
        "tags": [
          "Store Events"
        ],
        "summary": "Return all Store; Roles:ADMIN",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 0,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "storeId",
            "in": "query",
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Store"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Store Events"
        ],
        "summary": "Create Store Event; Roles:STORE_MANAGER",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreEventDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object persisted with valid id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "401": {
            "description": "Unauthorized Error"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/storeevents/{id}": {
      "get": {
        "tags": [
          "Store Events"
        ],
        "summary": "Return one Store Event by ID, Roles:STORE_MANAGER",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreEvent"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Store Events"
        ],
        "summary": "Update Store Event; Roles:STORE_MANAGER",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreEventDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "400": {
            "description": "Object malformed"
          },
          "401": {
            "description": "Unauthorized Error"
          },
          "403": {
            "description": "Store not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Store Events"
        ],
        "summary": "Remove a store event; Roles:STORE_MANAGER",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/stores": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Return all Store; Roles:ADMIN",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 0,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Store"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Stores"
        ],
        "summary": "Create Store; Roles:ADMIN",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "additionalPhotos",
                  "storeDTO"
                ],
                "type": "object",
                "properties": {
                  "additionalPhotos": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListFile"
                      },
                      {
                        "maxItems": 4,
                        "nullable": false
                      }
                    ]
                  },
                  "banner": {
                    "$ref": "#/components/schemas/File"
                  },
                  "historyPhoto1": {
                    "$ref": "#/components/schemas/File"
                  },
                  "historyPhoto2": {
                    "$ref": "#/components/schemas/File"
                  },
                  "historyPhoto3": {
                    "$ref": "#/components/schemas/File"
                  },
                  "historyPhoto4": {
                    "$ref": "#/components/schemas/File"
                  },
                  "storeDTO": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StoreDTO"
                      },
                      {
                        "nullable": false
                      }
                    ]
                  },
                  "thumbnail": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object persisted with valid id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "400": {
            "description": "INVALID POSTAL CODE"
          },
          "401": {
            "description": "Unauthorized Error"
          },
          "412": {
            "description": "PAYMENT SERVICE DOWN"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/stores/available-delivery-methods": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Return all delivery methods",
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeliveryMethod"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stores/categories": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "List all store categories",
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of store categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stores/courier": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Returns list of stores with courier",
        "responses": {
          "200": {
            "description": "Return list of stores with courier",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreInfoHeader"
                  }
                }
              }
            }
          },
          "400": {
            "description": "STORE NOT FOUND"
          }
        }
      }
    },
    "/stores/export": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Export to xls; Roles:ADMIN",
        "responses": {
          "200": {
            "description": "Download de result file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/stores/financial/{id}": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Return Financial Info; Roles:ADMIN",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialData"
                }
              }
            }
          },
          "400": {
            "description": "STORE NOT FOUND"
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/stores/locations": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "List all store locations",
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of store locations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stores/public": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "List public active stores",
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "highlight",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "location",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "online",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 0,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 25,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "vouchers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a list of active stores",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreInfoHeader"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stores/public/highlight": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "List all public active categories ",
        "responses": {
          "200": {
            "description": "Return all active categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreInfoHeader"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stores/public/{id}": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Return one Store by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreInfoHeader"
                }
              }
            }
          },
          "400": {
            "description": "STORE NOT FOUND"
          }
        }
      }
    },
    "/stores/with-category/{id}/public": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "List all public active stores",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "keyword",
            "in": "query",
            "schema": {
              "default": "*",
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 0,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 25,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all active stores",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Store"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stores/{id}": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Return one Store by ID, Roles:ADMIN, STORE_MANAGER",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "400": {
            "description": "STORE NOT FOUND"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Stores"
        ],
        "summary": "Update Store; Roles:ADMIN, STORE_MANAGER",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "additionalPhotos",
                  "storeDTO"
                ],
                "type": "object",
                "properties": {
                  "additionalPhotos": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ListFile"
                      },
                      {
                        "maxItems": 4,
                        "nullable": false
                      }
                    ]
                  },
                  "banner": {
                    "$ref": "#/components/schemas/File"
                  },
                  "historyPhoto1": {
                    "$ref": "#/components/schemas/File"
                  },
                  "historyPhoto2": {
                    "$ref": "#/components/schemas/File"
                  },
                  "historyPhoto3": {
                    "$ref": "#/components/schemas/File"
                  },
                  "historyPhoto4": {
                    "$ref": "#/components/schemas/File"
                  },
                  "storeDTO": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StoreDTO"
                      },
                      {
                        "nullable": false
                      }
                    ]
                  },
                  "thumbnail": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "400": {
            "description": "INVALID POSTAL CODE"
          },
          "401": {
            "description": "Unauthorized Error"
          },
          "403": {
            "description": "Store not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "412": {
            "description": "PAYMENT SERVICE DOWN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Stores"
        ],
        "summary": "Remove Store and  all products and services related; Roles:ADMIN",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "400": {
            "description": "Return IN USE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/stores/{id}/homedelivery": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Returns info about home delivery",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
              "nullable": false
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "required": true,
            "schema": {
              "format": "double",
              "maximum": 90,
              "minimum": -90,
              "type": "number",
              "nullable": false
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "required": true,
            "schema": {
              "format": "double",
              "maximum": 180,
              "minimum": -180,
              "type": "number",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns info home delivery",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "STORE NOT FOUND"
          }
        }
      }
    },
    "/stores/{id}/order/{orderId}/{filename}": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Returns a file; Roles:All",
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\S",
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "auth": [
              "auth"
            ]
          }
        ]
      }
    },
    "/stores/{id}/orders": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get store orders; Roles: STORE_MANAGER",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 0,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a list of store orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreDeliveryOrder"
                  }
                }
              }
            }
          },
          "403": {
            "description": "STORE NOT ALLOWED"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/stores/{id}/orders/{orderId}": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "find a store order by Id; Roles: STORE_MANAGER",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a store order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreDeliveryOrder"
                }
              }
            }
          },
          "400": {
            "description": "INVALID ORDER"
          },
          "403": {
            "description": "STORE NOT ALLOWED"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/stores/{id}/orders/{orderId}/confirm-stock": {
      "put": {
        "tags": [
          "Stores"
        ],
        "summary": "Confirm store order stock for pickup, ROLE:STORE_MANAGER",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreDeliveryOrder"
                }
              }
            }
          },
          "400": {
            "description": "INVALID STORE"
          },
          "403": {
            "description": "STORE NOT ALLOWED"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/stores/{id}/orders/{orderId}/status": {
      "put": {
        "tags": [
          "Stores"
        ],
        "summary": "Changes order status ROLE:STORE_MANAGER",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreDeliveryOrder"
                }
              }
            }
          },
          "400": {
            "description": "STORE NOT ALLOWED"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/stores/{id}/setfeed": {
      "post": {
        "tags": [
          "Stores"
        ],
        "summary": "Set products feed URL",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "url",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "auth": [
              "auth"
            ]
          }
        ]
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Return all tags with contained keywords, can use wildcard * on keyword start, end ou both",
        "parameters": [
          {
            "name": "keyword",
            "in": "query",
            "schema": {
              "minLength": 1,
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/tags/find/public": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Return all tags with contained keywords, can use wildcard * on keyword start, end ou both",
        "parameters": [
          {
            "name": "keyword",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tags/{id}": {
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Remove TAG",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return result OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List users. Roles: ADMIN",
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UserRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return users list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Register Store Manager, this type of user can create products on your own store,  Roles: ADMIN",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string",
                    "nullable": false
                  },
                  "name": {
                    "maxLength": 200,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  },
                  "password": {
                    "maxLength": 244,
                    "type": "string"
                  },
                  "storeId": {
                    "format": "int64",
                    "minimum": 1,
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return user with id and role STORE_MANAGER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid object"
          },
          "403": {
            "description": "Invalid Store"
          },
          "409": {
            "description": "User already Exists"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/users/export": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns a list of users in a XLSX file, ROLE:ADMIN",
        "responses": {
          "200": {
            "description": "Return a list of users in a XLSX file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/users/my-profile": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Return User Profile. Roles: ADMIN, STORE_MANAGER, CUSTOMER",
        "responses": {
          "200": {
            "description": "Return user profile ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update Profile,  Roles: ADMIN, STORE_MANAGER, CUSTOMER",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "maxLength": 300,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  },
                  "city": {
                    "maxLength": 50,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  },
                  "contact": {
                    "maxLength": 50,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  },
                  "email": {
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string",
                    "nullable": false
                  },
                  "name": {
                    "maxLength": 200,
                    "type": "string"
                  },
                  "newsletter": {
                    "type": "boolean"
                  },
                  "password": {
                    "maxLength": 244,
                    "type": "string"
                  },
                  "postalCode": {
                    "maxLength": 50,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return updated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid object"
          },
          "409": {
            "description": "Email already Exists"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/users/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates Store Manager, this type of user can create products on your own store,  Roles: ADMIN",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "maxLength": 200,
                    "minLength": 1,
                    "type": "string",
                    "nullable": false
                  },
                  "name": {
                    "maxLength": 200,
                    "pattern": "\\S",
                    "type": "string",
                    "nullable": false
                  },
                  "password": {
                    "maxLength": 244,
                    "type": "string"
                  },
                  "storeId": {
                    "format": "int64",
                    "minimum": 1,
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return user with id and role STORE_MANAGER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid object"
          },
          "403": {
            "description": "Invalid Store or User not exits"
          },
          "409": {
            "description": "Email already Exists"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Removes a user. Roles: ADMIN",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMessage"
                }
              }
            }
          },
          "403": {
            "description": "user not found"
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/version": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/vouchers": {
      "get": {
        "tags": [
          "Vouchers"
        ],
        "summary": "Returns a list of vouchers Roles:ADMIN",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "format": "int32",
              "default": 0,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of vouchers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Voucher"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": [
              "bearer"
            ]
          }
        ]
      }
    },
    "/vouchers/hasvoucher": {
      "get": {
        "tags": [
          "Vouchers"
        ],
        "summary": "Returns whatever a user already bought an voucher",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "vat",
            "in": "query",
            "required": true,
            "schema": {
              "maxLength": 9,
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns whatever a user already bought an voucher"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LocalTime": {
        "format": "local-time",
        "type": "string",
        "externalDocs": {
          "description": "As defined by 'partial-time' in RFC3339",
          "url": "https://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14"
        },
        "example": "13:45.30.123456789"
      },
      "HelpdeskScheduleDTO": {
        "required": [
          "closeOn",
          "openOn"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "closeOn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalTime"
              },
              {
                "nullable": false
              }
            ]
          },
          "day": {
            "format": "int32",
            "maximum": 6,
            "minimum": 0,
            "type": "integer"
          },
          "openOn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalTime"
              },
              {
                "nullable": false
              }
            ]
          }
        }
      },
      "HelpdeskSchedule": {
        "required": [
          "closeOn",
          "openOn"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "closeOn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalTime"
              },
              {
                "nullable": false
              }
            ]
          },
          "day": {
            "format": "int32",
            "maximum": 6,
            "minimum": 0,
            "type": "integer"
          },
          "openOn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalTime"
              },
              {
                "nullable": false
              }
            ]
          }
        }
      },
      "StoreEventDTO": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 200,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "storeId": {
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "year": {
            "format": "int32",
            "minimum": 1000,
            "type": "integer"
          }
        }
      },
      "SetString": {
        "uniqueItems": true,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "SetTag": {
        "uniqueItems": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Tag"
        }
      },
      "SetSchedule": {
        "uniqueItems": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Schedule"
        }
      },
      "Schedule": {
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "closeOn": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "endWeekDay": {
            "format": "int32",
            "maximum": 6,
            "minimum": 0,
            "type": "integer"
          },
          "initialWeekDay": {
            "format": "int32",
            "maximum": 6,
            "minimum": 0,
            "type": "integer"
          },
          "openOn": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "endWeekDayString": {
            "type": "string"
          },
          "initialWeekDayString": {
            "type": "string"
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          }
        }
      },
      "User": {
        "required": [
          "role"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "address": {
            "maxLength": 300,
            "type": "string"
          },
          "city": {
            "maxLength": 50,
            "type": "string"
          },
          "contact": {
            "maxLength": 50,
            "type": "string"
          },
          "email": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "nullable": false
          },
          "inactive": {
            "type": "boolean"
          },
          "lastAccess": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "maxLength": 200,
            "type": "string"
          },
          "newsletter": {
            "type": "boolean"
          },
          "postalCode": {
            "maxLength": 50,
            "type": "string"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserRole"
              },
              {
                "nullable": false
              }
            ]
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "myStores": {
            "$ref": "#/components/schemas/ListStoreInfoHeader"
          },
          "admin": {
            "type": "boolean"
          },
          "readyToMakeOrders": {
            "type": "boolean"
          },
          "storeManager": {
            "type": "boolean"
          }
        }
      },
      "ListStoreInfoHeader": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/StoreInfoHeader"
        }
      },
      "StoreInfoHeader": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "bannerHash": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "closeToLaunchOn": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "contact": {
            "type": "string"
          },
          "deliveryData": {
            "$ref": "#/components/schemas/DeliveryData"
          },
          "description": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "history": {
            "$ref": "#/components/schemas/History"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "latitude": {
            "format": "double",
            "type": "number"
          },
          "location": {
            "type": "string"
          },
          "longitude": {
            "format": "double",
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "openFromLaunchOn": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "photosHash": {
            "$ref": "#/components/schemas/SetString"
          },
          "postalCode": {
            "type": "string"
          },
          "thumbnailHash": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "weekSchedule": {
            "$ref": "#/components/schemas/SetSchedule"
          },
          "whatsAppNumber": {
            "type": "string"
          },
          "whatsAppReady": {
            "type": "boolean"
          }
        }
      },
      "History": {
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "aboutus": {
            "maxLength": 16383,
            "type": "string"
          },
          "description": {
            "maxLength": 16383,
            "type": "string"
          },
          "photo1": {
            "type": "string"
          },
          "photo2": {
            "type": "string"
          },
          "photo3": {
            "type": "string"
          },
          "photo4": {
            "type": "string"
          },
          "title": {
            "maxLength": 255,
            "type": "string"
          }
        }
      },
      "DeliveryData": {
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "distanceMax": {
            "format": "int64",
            "type": "integer"
          },
          "latitude": {
            "format": "double",
            "maximum": 90,
            "minimum": -90,
            "type": "number"
          },
          "longitude": {
            "format": "double",
            "maximum": 180,
            "minimum": -180,
            "type": "number"
          },
          "shippingPriceMin": {
            "type": "number"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "nullable": false
          },
          "disabled": {
            "type": "boolean"
          },
          "inUse": {
            "type": "boolean"
          },
          "longDescription": {
            "maxLength": 1000,
            "type": "string"
          },
          "headerUrl": {
            "type": "string"
          },
          "thumbnailUrl": {
            "type": "string"
          }
        }
      },
      "UserStatus": {
        "enum": [
          "APPROVED",
          "BLOCKED",
          "IDLE",
          "PENDING"
        ],
        "type": "string"
      },
      "UserRole": {
        "enum": [
          "ADMIN",
          "CUSTOMER",
          "GUEST",
          "STORE_MANAGER"
        ],
        "type": "string"
      },
      "Store": {
        "required": [
          "category"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "address": {
            "maxLength": 300,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "allowVouchers": {
            "type": "boolean"
          },
          "bannerHash": {
            "type": "string"
          },
          "bicSwift": {
            "maxLength": 12,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Category"
              },
              {
                "nullable": false
              }
            ]
          },
          "certCode": {
            "maxLength": 100,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "closeToLaunch": {
            "type": "boolean"
          },
          "closeToLaunchOn": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "contact": {
            "maxLength": 50,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "country": {
            "maxLength": 100,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "courier": {
            "type": "boolean"
          },
          "deliveryData": {
            "$ref": "#/components/schemas/DeliveryData"
          },
          "description": {
            "maxLength": 16383,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "disabled": {
            "type": "boolean"
          },
          "email": {
            "maxLength": 50,
            "type": "string"
          },
          "highlight": {
            "type": "boolean"
          },
          "history": {
            "$ref": "#/components/schemas/History"
          },
          "iban": {
            "maxLength": 34,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "latitude": {
            "format": "double",
            "maximum": 90,
            "minimum": -90,
            "type": "number"
          },
          "location": {
            "maxLength": 200,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "longitude": {
            "format": "double",
            "maximum": 180,
            "minimum": -180,
            "type": "number"
          },
          "manager": {
            "$ref": "#/components/schemas/User"
          },
          "name": {
            "maxLength": 200,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "nif": {
            "maxLength": 9,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "openFromLaunchOn": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "photosHash": {
            "$ref": "#/components/schemas/SetString"
          },
          "postalCode": {
            "maxLength": 50,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "productsFeedURL": {
            "type": "string"
          },
          "tags": {
            "$ref": "#/components/schemas/SetTag"
          },
          "thumbnailHash": {
            "type": "string"
          },
          "website": {
            "maxLength": 100,
            "type": "string"
          },
          "weekSchedule": {
            "$ref": "#/components/schemas/SetSchedule"
          },
          "whatsAppNumber": {
            "type": "string"
          },
          "thumbnailUrl": {
            "type": "string"
          },
          "paymentInfoValid": {
            "type": "boolean"
          },
          "whatsAppReady": {
            "type": "boolean"
          }
        }
      },
      "StoreEvent": {
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "maxLength": 200,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "store": {
            "$ref": "#/components/schemas/Store"
          },
          "year": {
            "format": "int32",
            "minimum": 1000,
            "type": "integer"
          }
        }
      },
      "ResultMessage": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string"
          }
        }
      },
      "Result": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "UUID": {
        "format": "uuid",
        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
        "type": "string"
      },
      "ShoppingCartDto": {
        "required": [
          "cartId"
        ],
        "type": "object",
        "properties": {
          "cartId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              },
              {
                "nullable": false
              }
            ]
          },
          "product": {
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "quantity": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      },
      "Product": {
        "required": [
          "availableDeliveryMethods",
          "category",
          "price"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "availableDeliveryMethods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SetDeliveryMethod"
              },
              {
                "nullable": false
              }
            ]
          },
          "brand": {
            "maxLength": 300,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Category"
              },
              {
                "nullable": false
              }
            ]
          },
          "color": {
            "type": "string"
          },
          "colorHex": {
            "type": "string"
          },
          "description": {
            "maxLength": 2000,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "disabled": {
            "type": "boolean"
          },
          "discountEnd": {
            "format": "date-time",
            "type": "string"
          },
          "discountPrice": {
            "minimum": 0,
            "type": "number"
          },
          "discountStart": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "height": {
            "format": "int32",
            "type": "integer"
          },
          "highlight": {
            "type": "boolean"
          },
          "inPromotion": {
            "type": "boolean"
          },
          "inStock": {
            "type": "boolean"
          },
          "length": {
            "format": "int32",
            "type": "integer"
          },
          "packingWeight": {
            "format": "double",
            "minimum": 0,
            "type": "number"
          },
          "photosHash": {
            "$ref": "#/components/schemas/SetString"
          },
          "price": {
            "minimum": 0,
            "type": "number",
            "nullable": false
          },
          "reference": {
            "maxLength": 300,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "shortDescription": {
            "maxLength": 300,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "size": {
            "type": "string"
          },
          "subCategory": {
            "$ref": "#/components/schemas/SubCategory"
          },
          "tags": {
            "$ref": "#/components/schemas/SetTag"
          },
          "tax": {
            "format": "double",
            "type": "number"
          },
          "thumbnailHash": {
            "type": "string"
          },
          "visibleOnlyOnGroup": {
            "type": "boolean"
          },
          "voucher": {
            "type": "boolean"
          },
          "voucherBonus": {
            "type": "number"
          },
          "width": {
            "format": "int32",
            "type": "integer"
          },
          "discount": {
            "format": "int32",
            "type": "integer"
          },
          "storeInfo": {
            "$ref": "#/components/schemas/StoreItem"
          },
          "thumbnailUrl": {
            "type": "string"
          }
        }
      },
      "SetDeliveryMethod": {
        "uniqueItems": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DeliveryMethod"
        }
      },
      "StoreItem": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SubCategory": {
        "required": [
          "mainCategory"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "nullable": false
          },
          "disabled": {
            "type": "boolean"
          },
          "inUse": {
            "type": "boolean"
          },
          "mainCategory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Category"
              },
              {
                "nullable": false
              }
            ]
          }
        }
      },
      "DeliveryMethod": {
        "enum": [
          "COURIER",
          "EMAIL",
          "HOME",
          "PRIVATE",
          "THIRD_PARTY"
        ],
        "type": "string"
      },
      "ShoppingCart": {
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "cartId": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "quantity": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "voucherBonus": {
            "type": "number"
          }
        }
      },
      "VoucherState": {
        "enum": [
          "NEW",
          "USED"
        ],
        "type": "string"
      },
      "Voucher": {
        "required": [
          "code",
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "bonus": {
            "type": "number"
          },
          "code": {
            "type": "string",
            "nullable": false
          },
          "name": {
            "type": "string",
            "nullable": false
          },
          "state": {
            "$ref": "#/components/schemas/VoucherState"
          },
          "value": {
            "type": "number",
            "nullable": false
          },
          "vatNumber": {
            "maxLength": 9,
            "type": "string"
          }
        }
      },
      "ListLong": {
        "type": "array",
        "items": {
          "format": "int64",
          "type": "integer"
        }
      },
      "ShippingPrice": {
        "required": [
          "price"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "maxWeight": {
            "format": "double",
            "type": "number"
          },
          "price": {
            "type": "number",
            "nullable": false
          }
        }
      },
      "ShippingPriceDTO": {
        "required": [
          "price"
        ],
        "type": "object",
        "properties": {
          "price": {
            "minimum": 0,
            "type": "number",
            "nullable": false
          }
        }
      },
      "MessageType": {
        "enum": [
          "HEALTH",
          "MARKET"
        ],
        "type": "string"
      },
      "Message": {
        "required": [
          "messageType"
        ],
        "type": "object",
        "properties": {
          "contact": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "nullable": false
          },
          "email": {
            "maxLength": 120,
            "minLength": 1,
            "type": "string",
            "nullable": false
          },
          "message": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "nullable": false
          },
          "messageType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageType"
              },
              {
                "nullable": false
              }
            ]
          },
          "name": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "nullable": false
          }
        }
      },
      "StoreApplicationMessage": {
        "type": "object",
        "properties": {
          "address": {
            "maxLength": 300,
            "minLength": 1,
            "type": "string",
            "nullable": false
          },
          "categoryId": {
            "format": "int64",
            "type": "integer"
          },
          "city": {
            "maxLength": 50,
            "type": "string"
          },
          "email": {
            "maxLength": 120,
            "minLength": 1,
            "type": "string",
            "nullable": false
          },
          "name": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "nullable": false
          },
          "phone": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "nullable": false
          },
          "postalCode": {
            "maxLength": 50,
            "type": "string"
          },
          "storeName": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "nullable": false
          }
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "absoluteFile": {
            "$ref": "#/components/schemas/File"
          },
          "absolutePath": {
            "type": "string"
          },
          "canonicalFile": {
            "$ref": "#/components/schemas/File"
          },
          "canonicalPath": {
            "type": "string"
          },
          "freeSpace": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "parentFile": {
            "$ref": "#/components/schemas/File"
          },
          "totalSpace": {
            "format": "int64",
            "type": "integer"
          },
          "usableSpace": {
            "format": "int64",
            "type": "integer"
          },
          "absolute": {
            "type": "boolean"
          },
          "directory": {
            "type": "boolean"
          },
          "file": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "invalid": {
            "type": "boolean"
          }
        }
      },
      "PaymentMethod": {
        "enum": [
          "CREDIT_CARD",
          "DEBIT_CARD",
          "MBWAY"
        ],
        "type": "string"
      },
      "PaymentFeeConfiguration": {
        "required": [
          "fee",
          "minFee",
          "paymentMethod"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "fee": {
            "type": "number",
            "nullable": false
          },
          "feePercentage": {
            "type": "number"
          },
          "maxFee": {
            "type": "number"
          },
          "minFee": {
            "type": "number",
            "nullable": false
          },
          "paymentMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              },
              {
                "nullable": false
              }
            ]
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "address": {
            "maxLength": 300,
            "minLength": 3,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "city": {
            "maxLength": 50,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "name": {
            "maxLength": 300,
            "minLength": 3,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "phone": {
            "maxLength": 50,
            "type": "string"
          },
          "postalCode": {
            "maxLength": 50,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          }
        }
      },
      "SavedAddress": {
        "required": [
          "address"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "nullable": false
              }
            ]
          }
        }
      },
      "CollectionPoint": {
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "address": {
            "maxLength": 300,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "closeToLaunch": {
            "type": "boolean"
          },
          "closeToLaunchOn": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "contact": {
            "maxLength": 50,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "description": {
            "maxLength": 1000,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "disabled": {
            "type": "boolean"
          },
          "email": {
            "maxLength": 50,
            "type": "string"
          },
          "latitude": {
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "format": "double",
            "type": "number"
          },
          "name": {
            "maxLength": 200,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "openFromLaunchOn": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "postalCode": {
            "maxLength": 50,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "thumbnailHash": {
            "type": "string"
          },
          "weekSchedule": {
            "$ref": "#/components/schemas/SetSchedule"
          },
          "thumbnailUrl": {
            "type": "string"
          }
        }
      },
      "HealthProduct": {
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "collectionPoint": {
            "$ref": "#/components/schemas/CollectionPoint"
          },
          "description": {
            "maxLength": 2000,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "disabled": {
            "type": "boolean"
          },
          "shortDescription": {
            "maxLength": 300,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "thumbnailHash": {
            "type": "string"
          },
          "thumbnailUrl": {
            "type": "string"
          }
        }
      },
      "HealthProductDTO": {
        "type": "object",
        "properties": {
          "collectionPointId": {
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "description": {
            "maxLength": 2000,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "disabled": {
            "type": "boolean"
          },
          "shortDescription": {
            "maxLength": 300,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          }
        }
      },
      "CollectionPointDTO": {
        "type": "object",
        "properties": {
          "address": {
            "maxLength": 300,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "closeToLaunchOn": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "contact": {
            "maxLength": 50,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "description": {
            "maxLength": 16383,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "disabled": {
            "type": "boolean"
          },
          "email": {
            "maxLength": 50,
            "type": "string"
          },
          "homeDelivery": {
            "type": "boolean"
          },
          "latitude": {
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "format": "double",
            "type": "number"
          },
          "name": {
            "maxLength": 200,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "openFromLaunchOn": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "postalCode": {
            "maxLength": 8,
            "minLength": 8,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "weekSchedule": {
            "$ref": "#/components/schemas/SetSchedule"
          }
        }
      },
      "HealthOrderStatus": {
        "enum": [
          "CANCELED",
          "FINISHED",
          "IN_PROGRESS",
          "REQUESTED",
          "WAITING_FOR_PICKUP"
        ],
        "type": "string"
      },
      "SetHealthOrderLine": {
        "uniqueItems": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/HealthOrderLine"
        }
      },
      "SetHealthOrderProgress": {
        "uniqueItems": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/HealthOrderProgress"
        }
      },
      "HealthOrderProgress": {
        "required": [
          "onDate",
          "status"
        ],
        "type": "object",
        "properties": {
          "onDate": {
            "format": "date-time",
            "type": "string",
            "nullable": false
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HealthOrderStatus"
              },
              {
                "nullable": false
              }
            ]
          }
        }
      },
      "HealthOrderLine": {
        "type": "object",
        "properties": {
          "description": {
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "nif": {
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "productId": {
            "format": "int64",
            "type": "integer"
          },
          "quantity": {
            "format": "int32",
            "maximum": 1,
            "minimum": 1,
            "type": "integer"
          }
        }
      },
      "Claimant": {
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "address": {
            "maxLength": 300,
            "type": "string"
          },
          "contact": {
            "maxLength": 50,
            "type": "string"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "maxLength": 200,
            "type": "string"
          },
          "name": {
            "maxLength": 200,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "nif": {
            "maxLength": 9,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "postalCode": {
            "maxLength": 50,
            "type": "string"
          }
        }
      },
      "HealthOrder": {
        "required": [
          "claimant"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "claimant": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Claimant"
              },
              {
                "nullable": false
              }
            ]
          },
          "collectionPoint": {
            "$ref": "#/components/schemas/CollectionPoint"
          },
          "currentStatus": {
            "$ref": "#/components/schemas/HealthOrderStatus"
          },
          "finished": {
            "type": "boolean"
          },
          "lastChange": {
            "format": "date-time",
            "type": "string"
          },
          "observations": {
            "maxLength": 2000,
            "type": "string"
          },
          "orderLines": {
            "$ref": "#/components/schemas/SetHealthOrderLine"
          },
          "stateProgress": {
            "$ref": "#/components/schemas/SetHealthOrderProgress"
          }
        }
      },
      "HealthOrderChangeStateDto": {
        "required": [
          "stateProgress"
        ],
        "type": "object",
        "properties": {
          "stateProgress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HealthOrderStatus"
              },
              {
                "nullable": false
              }
            ]
          }
        }
      },
      "ClaimantDto": {
        "type": "object",
        "properties": {
          "address": {
            "maxLength": 300,
            "type": "string"
          },
          "contact": {
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "email": {
            "maxLength": 200,
            "type": "string"
          },
          "name": {
            "maxLength": 200,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "nif": {
            "maxLength": 9,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "postalCode": {
            "maxLength": 50,
            "type": "string"
          }
        }
      },
      "HealthOrderDto": {
        "type": "object",
        "properties": {
          "claimant": {
            "$ref": "#/components/schemas/ClaimantDto"
          },
          "collectionPointId": {
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "observations": {
            "maxLength": 2000,
            "type": "string"
          },
          "orderLines": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SetHealthOrderLine"
              },
              {
                "minItems": 1
              }
            ]
          }
        }
      },
      "ListFile": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/File"
        }
      },
      "StoreDTO": {
        "type": "object",
        "properties": {
          "address": {
            "maxLength": 300,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "closeToLaunchOn": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "contact": {
            "maxLength": 50,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "description": {
            "maxLength": 16383,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "disabled": {
            "type": "boolean"
          },
          "email": {
            "maxLength": 50,
            "type": "string"
          },
          "homeDelivery": {
            "type": "boolean"
          },
          "latitude": {
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "format": "double",
            "type": "number"
          },
          "name": {
            "maxLength": 200,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "openFromLaunchOn": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "postalCode": {
            "maxLength": 8,
            "minLength": 8,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "weekSchedule": {
            "$ref": "#/components/schemas/SetSchedule"
          },
          "allowVouchers": {
            "type": "boolean"
          },
          "bicSwift": {
            "maxLength": 12,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "categoryId": {
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "certCode": {
            "maxLength": 100,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "country": {
            "maxLength": 100,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "courier": {
            "type": "boolean"
          },
          "deliveryData": {
            "$ref": "#/components/schemas/DeliveryData"
          },
          "highlight": {
            "type": "boolean"
          },
          "history": {
            "$ref": "#/components/schemas/History"
          },
          "iban": {
            "maxLength": 34,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "nif": {
            "maxLength": 9,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "photosToRemove": {
            "$ref": "#/components/schemas/SetString"
          },
          "tags": {
            "$ref": "#/components/schemas/SetString"
          },
          "website": {
            "maxLength": 100,
            "type": "string"
          },
          "whatsAppNumber": {
            "type": "string"
          }
        }
      },
      "FinancialData": {
        "type": "object",
        "properties": {
          "euPagoExternalAccount": {
            "type": "string"
          },
          "euPagoPrivateAccount": {
            "type": "string"
          }
        }
      },
      "ListOrderLine": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/OrderLine"
        }
      },
      "ListShippingBox": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ShippingBox"
        }
      },
      "ShippingBox": {
        "required": [
          "shippingPrice",
          "state"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "expectedWeight": {
            "format": "double",
            "type": "number"
          },
          "leftOverSpace": {
            "format": "double",
            "type": "number"
          },
          "maxWeight": {
            "format": "double",
            "type": "number"
          },
          "shippingPrice": {
            "type": "number",
            "nullable": false
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShippingBoxState"
              },
              {
                "nullable": false
              }
            ]
          },
          "trackingObjectFirst": {
            "type": "string"
          },
          "trackingObjectLast": {
            "type": "string"
          }
        }
      },
      "ShippingBoxState": {
        "enum": [
          "CLOSED",
          "CREATED",
          "DELIVERED",
          "NEW",
          "NOT_DELIVERED",
          "SHIPPING"
        ],
        "type": "string"
      },
      "OrderState": {
        "enum": [
          "CANCELED",
          "CANCELED_NO_PAYMENT",
          "DELIVERED",
          "DELIVERY_NOT_POSSIBLE",
          "IN_TRANSIT",
          "PAID",
          "PROCESSING",
          "READY_TO_PICKUP",
          "WAITING_PAYMENT"
        ],
        "type": "string"
      },
      "OrderLine": {
        "required": [
          "subTotal",
          "tax",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "brand": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "description": {
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "previousPrice": {
            "type": "number"
          },
          "productId": {
            "format": "int64",
            "type": "integer"
          },
          "productReference": {
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "quantity": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "size": {
            "type": "string"
          },
          "subTotal": {
            "type": "number",
            "nullable": false
          },
          "tax": {
            "format": "double",
            "type": "number",
            "nullable": false
          },
          "unitPrice": {
            "type": "number",
            "nullable": false
          },
          "voucher": {
            "type": "boolean"
          },
          "voucherBonus": {
            "type": "number"
          },
          "voucherCode": {
            "type": "string"
          }
        }
      },
      "StoreDeliveryOrder": {
        "required": [
          "customer",
          "deliveryMethod",
          "orderState",
          "productSubTotal",
          "shippingPrice",
          "total"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "address": {
            "maxLength": 300,
            "type": "string"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "city": {
            "maxLength": 300,
            "type": "string"
          },
          "contact": {
            "maxLength": 50,
            "type": "string"
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "nullable": false
              }
            ]
          },
          "deliveryDate": {
            "format": "date-time",
            "type": "string"
          },
          "deliveryMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryMethod"
              },
              {
                "nullable": false
              }
            ]
          },
          "homeDeliveryPrice": {
            "type": "number"
          },
          "invoiceNif": {
            "maxLength": 9,
            "type": "string"
          },
          "latitude": {
            "format": "double",
            "maximum": 90,
            "minimum": -90,
            "type": "number"
          },
          "locality": {
            "type": "string"
          },
          "longitude": {
            "format": "double",
            "maximum": 180,
            "minimum": -180,
            "type": "number"
          },
          "orderId": {
            "format": "int64",
            "type": "integer"
          },
          "orderLines": {
            "$ref": "#/components/schemas/ListOrderLine"
          },
          "orderState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderState"
              },
              {
                "nullable": false
              }
            ]
          },
          "paymentDate": {
            "format": "date-time",
            "type": "string"
          },
          "pickupId": {
            "type": "string"
          },
          "postalCode": {
            "maxLength": 50,
            "type": "string"
          },
          "processingDate": {
            "format": "date-time",
            "type": "string"
          },
          "productSubTotal": {
            "type": "number",
            "nullable": false
          },
          "shippingBoxes": {
            "$ref": "#/components/schemas/ListShippingBox"
          },
          "shippingPrice": {
            "type": "number",
            "nullable": false
          },
          "storeOrderId": {
            "format": "int64",
            "type": "integer"
          },
          "total": {
            "type": "number",
            "nullable": false
          },
          "storeName": {
            "type": "string"
          }
        }
      },
      "ListStoreOrderDto": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/StoreOrderDto"
        }
      },
      "StoreOrderDto": {
        "required": [
          "shoppingLines"
        ],
        "type": "object",
        "properties": {
          "shoppingLines": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListShoppingLineDto"
              },
              {
                "minItems": 1,
                "nullable": false
              }
            ]
          },
          "storeId": {
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          }
        }
      },
      "ListShoppingLineDto": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ShoppingLineDto"
        }
      },
      "ShoppingLineDto": {
        "required": [
          "deliveryMethod"
        ],
        "type": "object",
        "properties": {
          "deliveryMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryMethod"
              },
              {
                "nullable": false
              }
            ]
          },
          "productId": {
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "quantity": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      },
      "OrderDto": {
        "required": [
          "paymentMethod",
          "storeOrders"
        ],
        "type": "object",
        "properties": {
          "address": {
            "maxLength": 300,
            "type": "string"
          },
          "alias": {
            "maxLength": 255,
            "type": "string"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "city": {
            "maxLength": 50,
            "type": "string"
          },
          "contact": {
            "maxLength": 50,
            "type": "string"
          },
          "invoiceName": {
            "maxLength": 200,
            "type": "string"
          },
          "invoiceNif": {
            "maxLength": 9,
            "type": "string"
          },
          "latitude": {
            "format": "double",
            "maximum": 90,
            "minimum": -90,
            "type": "number"
          },
          "longitude": {
            "format": "double",
            "maximum": 180,
            "minimum": -180,
            "type": "number"
          },
          "paymentMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              },
              {
                "nullable": false
              }
            ]
          },
          "postalCode": {
            "maxLength": 50,
            "type": "string"
          },
          "saveBillingAddress": {
            "type": "boolean"
          },
          "storeOrders": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListStoreOrderDto"
              },
              {
                "minItems": 1,
                "nullable": false
              }
            ]
          },
          "missingAddressParts": {
            "type": "boolean"
          }
        }
      },
      "SetStoreOrder": {
        "uniqueItems": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/StoreOrder"
        }
      },
      "StoreOrder": {
        "required": [
          "productSubTotal",
          "shippingPrice",
          "total"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "address": {
            "maxLength": 300,
            "type": "string"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "city": {
            "maxLength": 50,
            "type": "string"
          },
          "contact": {
            "maxLength": 50,
            "type": "string"
          },
          "homeDeliveryPrice": {
            "type": "number"
          },
          "invoiceNif": {
            "maxLength": 9,
            "type": "string"
          },
          "latitude": {
            "format": "double",
            "maximum": 90,
            "minimum": -90,
            "type": "number"
          },
          "locality": {
            "type": "string"
          },
          "longitude": {
            "format": "double",
            "maximum": 180,
            "minimum": -180,
            "type": "number"
          },
          "orderId": {
            "format": "int64",
            "type": "integer"
          },
          "postalCode": {
            "maxLength": 50,
            "type": "string"
          },
          "productSubTotal": {
            "type": "number",
            "nullable": false
          },
          "shippingPrice": {
            "type": "number",
            "nullable": false
          },
          "shoppingLines": {
            "$ref": "#/components/schemas/SetShoppingLine"
          },
          "total": {
            "type": "number",
            "nullable": false
          },
          "customerInfo": {
            "$ref": "#/components/schemas/UserInfo"
          },
          "storeInfo": {
            "$ref": "#/components/schemas/StoreInfoHeader"
          }
        }
      },
      "SetShoppingLine": {
        "uniqueItems": true,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ShoppingLine"
        }
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ShoppingLine": {
        "required": [
          "deliveryMethod",
          "subTotal",
          "tax",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "brand": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "deliveryMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryMethod"
              },
              {
                "nullable": false
              }
            ]
          },
          "description": {
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "previousPrice": {
            "type": "number"
          },
          "productId": {
            "format": "int64",
            "type": "integer"
          },
          "productReference": {
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "quantity": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "size": {
            "type": "string"
          },
          "subTotal": {
            "type": "number",
            "nullable": false
          },
          "tax": {
            "format": "double",
            "type": "number",
            "nullable": false
          },
          "unitPrice": {
            "type": "number",
            "nullable": false
          },
          "voucher": {
            "type": "boolean"
          },
          "voucherBonus": {
            "type": "number"
          }
        }
      },
      "PaymentReferenceInfo": {
        "required": [
          "paymentMethod",
          "reference",
          "transactionStatus"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "maxLength": 255,
            "type": "string"
          },
          "amount": {
            "minimum": 0,
            "type": "number"
          },
          "entity": {
            "maxLength": 255,
            "type": "string"
          },
          "fee": {
            "minimum": 0,
            "type": "number"
          },
          "paymentMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              },
              {
                "nullable": false
              }
            ]
          },
          "reference": {
            "maxLength": 255,
            "type": "string",
            "nullable": false
          },
          "transactionStatus": {
            "maxLength": 255,
            "type": "string",
            "nullable": false
          }
        }
      },
      "ShoppingState": {
        "enum": [
          "CANCELED_NO_PAYMENT",
          "PAID",
          "WAITING_PAYMENT"
        ],
        "type": "string"
      },
      "Order": {
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "address": {
            "maxLength": 300,
            "type": "string"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "city": {
            "maxLength": 50,
            "type": "string"
          },
          "contact": {
            "maxLength": 50,
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/User"
          },
          "homeDeliveryPrice": {
            "type": "number"
          },
          "invoiceName": {
            "maxLength": 200,
            "type": "string"
          },
          "invoiceNif": {
            "maxLength": 9,
            "type": "string"
          },
          "latitude": {
            "format": "double",
            "maximum": 90,
            "minimum": -90,
            "type": "number"
          },
          "longitude": {
            "format": "double",
            "maximum": 180,
            "minimum": -180,
            "type": "number"
          },
          "orderState": {
            "$ref": "#/components/schemas/ShoppingState"
          },
          "paymentReferenceInfo": {
            "$ref": "#/components/schemas/PaymentReferenceInfo"
          },
          "postalCode": {
            "maxLength": 50,
            "type": "string"
          },
          "shippingPrice": {
            "type": "number"
          },
          "storeOrders": {
            "$ref": "#/components/schemas/SetStoreOrder"
          },
          "subtotal": {
            "type": "number"
          }
        }
      },
      "CategoryDTO": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "nullable": false
          },
          "disabled": {
            "type": "boolean"
          },
          "longDescription": {
            "maxLength": 1000,
            "type": "string"
          }
        }
      },
      "ProductPublicResponse": {
        "required": [
          "availableDeliveryMethods",
          "category",
          "price",
          "storeInfo"
        ],
        "type": "object",
        "properties": {
          "availableDeliveryMethods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SetDeliveryMethod"
              },
              {
                "nullable": false
              }
            ]
          },
          "brand": {
            "maxLength": 300,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Category"
              },
              {
                "nullable": false
              }
            ]
          },
          "color": {
            "type": "string"
          },
          "colorHex": {
            "type": "string"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "maxLength": 2000,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "disabled": {
            "type": "boolean"
          },
          "discount": {
            "format": "int32",
            "type": "integer"
          },
          "discountEnd": {
            "format": "date-time",
            "type": "string"
          },
          "discountPrice": {
            "minimum": 0,
            "type": "number"
          },
          "discountStart": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "height": {
            "format": "int32",
            "type": "integer"
          },
          "highlight": {
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "inPromotion": {
            "type": "boolean"
          },
          "inStock": {
            "type": "boolean"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "length": {
            "format": "int32",
            "type": "integer"
          },
          "packingWeight": {
            "format": "double",
            "minimum": 0,
            "type": "number"
          },
          "photosHash": {
            "$ref": "#/components/schemas/SetString"
          },
          "price": {
            "minimum": 0,
            "type": "number",
            "nullable": false
          },
          "reference": {
            "maxLength": 300,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "shortDescription": {
            "maxLength": 300,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "size": {
            "type": "string"
          },
          "storeInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StoreItem"
              },
              {
                "nullable": false
              }
            ]
          },
          "subCategory": {
            "$ref": "#/components/schemas/SubCategory"
          },
          "tags": {
            "$ref": "#/components/schemas/SetTag"
          },
          "tax": {
            "format": "double",
            "type": "number"
          },
          "thumbnailHash": {
            "type": "string"
          },
          "visibleOnlyOnGroup": {
            "type": "boolean"
          },
          "voucher": {
            "type": "boolean"
          },
          "voucherBonus": {
            "type": "number"
          },
          "width": {
            "format": "int32",
            "type": "integer"
          },
          "thumbnailUrl": {
            "type": "string"
          }
        }
      },
      "ProductCSV": {
        "type": "object",
        "properties": {
          "availability": {
            "type": "string"
          },
          "brand": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "condition": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "imageLink": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "productType": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "storeID": {
            "format": "int64",
            "type": "integer"
          },
          "storeName": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "weight": {
            "type": "string"
          }
        }
      },
      "ProductDTO": {
        "required": [
          "availableDeliveryMethods",
          "price"
        ],
        "type": "object",
        "properties": {
          "availableDeliveryMethods": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SetDeliveryMethod"
              },
              {
                "nullable": false
              }
            ]
          },
          "brand": {
            "maxLength": 300,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "categoryId": {
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "color": {
            "type": "string"
          },
          "colorHex": {
            "type": "string"
          },
          "description": {
            "maxLength": 2000,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "disabled": {
            "type": "boolean"
          },
          "discountEnd": {
            "format": "date-time",
            "type": "string"
          },
          "discountPrice": {
            "minimum": 0,
            "type": "number"
          },
          "discountStart": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "groupId": {
            "maxLength": 50,
            "type": "string"
          },
          "height": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "inPromotion": {
            "type": "boolean"
          },
          "inStock": {
            "type": "boolean"
          },
          "length": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "packingWeight": {
            "format": "double",
            "minimum": 0,
            "type": "number"
          },
          "photosToRemove": {
            "$ref": "#/components/schemas/SetString"
          },
          "price": {
            "minimum": 0,
            "type": "number",
            "nullable": false
          },
          "reference": {
            "maxLength": 300,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "shortDescription": {
            "maxLength": 300,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "size": {
            "type": "string"
          },
          "subCategoryId": {
            "format": "int64",
            "type": "integer"
          },
          "tags": {
            "$ref": "#/components/schemas/SetString"
          },
          "thumbnailHash": {
            "type": "string"
          },
          "visibleOnlyOnGroup": {
            "type": "boolean"
          },
          "voucher": {
            "type": "boolean"
          },
          "voucherBonus": {
            "type": "number"
          },
          "width": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        }
      },
      "UpdateConfigRequest": {
        "type": "object",
        "properties": {
          "whatsapp": {
            "maxLength": 255,
            "type": "string"
          }
        }
      },
      "Config": {
        "type": "object",
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "lastModifiedDate": {
            "format": "date-time",
            "type": "string"
          },
          "param": {
            "maxLength": 255,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          },
          "value": {
            "maxLength": 255,
            "pattern": "\\S",
            "type": "string",
            "nullable": false
          }
        }
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}